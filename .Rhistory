library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pcaIdex<-names(training)
pcaIdex<-sapply(pcaIdex,function(x) substr(x,1,2)=="IL")
trainData<-training[,pcaIdex]
preProc<-preProcess(trainData,method="pca",thred=0.8)
pcaTraining<-predict(preProc,trainData)
testData<-testing[,pcaIdex]
pcaTesting<-predict(preProc,testData)
modelFit<-train(training$diagnosis~.,method="glm",data=trainData)
confusionMatrix(testing$diagnosis,predict(modelFit,testData))
pcaFit<-train(training$diagnosis~.,method="glm",data=pcaTraining)
confusionMatrix(testing$diagnosis,predict(modelFit,pcaTesting))
confusionMatrix(testing$diagnosis,predict(pcaFit,pcaTesting))
View(pcatest)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pcaIdex<-names(training)
pcaIdex<-sapply(pcaIdex,function(x) substr(x,1,2)=="IL")
trainData<-training[,pcaIdex]
preProc<-preProcess(trainData,method="pca",thred=0.9)
pcaTraining<-predict(preProc,trainData)
testData<-testing[,pcaIdex]
pcaTesting<-predict(preProc,testData)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pcaIdex<-names(training)
pcaIdex<-sapply(pcaIdex,function(x) substr(x,1,2)=="IL")
trainData<-training[,pcaIdex]
preProc<-preProcess(trainData,method="pca",thresh=0.9)
pcaTraining<-predict(preProc,trainData)
testData<-testing[,pcaIdex]
pcaTesting<-predict(preProc,testData)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pcaIdex<-names(training)
pcaIdex<-sapply(pcaIdex,function(x) substr(x,1,2)=="IL")
trainData<-training[,pcaIdex]
preProc<-preProcess(trainData,method="pca",thresh=0.8)
pcaTraining<-predict(preProc,trainData)
testData<-testing[,pcaIdex]
pcaTesting<-predict(preProc,testData)
modelFit<-train(training$diagnosis~.,method="glm",data=trainData)
confusionMatrix(testing$diagnosis,predict(modelFit,testData))
pcaFit<-train(training$diagnosis~.,method="glm",data=pcaTraining)
confusionMatrix(testing$diagnosis,predict(pcaFit,pcaTesting))
pcaFit#finalDefaultMethod
pcaFit
pcaFit#finalDefaultMethod()
str(pcaFit)
pcaFit$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationoriginal)
names(segmentationOriginal)
head(segmentationOriginal$case)
head(segmentationOriginal$Case)
head(segmentationOriginal$Cell)
head(segmentationOriginal$Class)
table(segmentationOriginal$Case)
training<-segmentationOriginal[segmentationOriginal$Case==Train,]
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
modFit<-train(Class~.,method="rpart",data=training)
a<-c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modFit,a)
predict(modFit,testing)
a<-data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modFit,a)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
plot(modFit$finalModel,uniform=TRUE,main="classificationtree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
print(modFit$finalModel)
install.packages("rattle")
library(rattle)
library("rattle")
fancyRpartPlot(modFif$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plt")
install.packages("rpart.plot")
library("rpart.plot")
fancyRpartPlot(modFit$finalModel)
library("ROSE")
data(hacide)
# check imbalance on training set
table(hacide.train$cls)
# model estimation using logistic regression
fit.hacide <- glm(cls~., data=hacide.train, family="binomial")
# prediction on training set
pred.hacide.train <- predict(fit.hacide, newdata=hacide.train)
# plot the ROC curve (training set)
roc.curve(hacide.train$cls, pred.hacide.train,
main="ROC curve \n (Half circle depleted data)")
# check imbalance on test set
table(hacide.test$cls)
# prediction using test set
pred.hacide.test <- predict(fit.hacide, newdata=hacide.test)
# add the ROC curve (test set)
roc.curve(hacide.test$cls, pred.hacide.test, add=TRUE, col=2,
lwd=2, lty=2)
legend("topleft", c("Resubstitution estimate", "Holdout estimate"),
col=1:2, lty=1:2, lwd=2)
roc.curve(hacide.train$cls, pred.hacide.train,n.thresholds=100)
roc.curve(hacide.train$cls, pred.hacide.train,n.thresholds=10)
roc.curve(hacide.train$cls, pred.hacide.train,n.thresholds=1)
roc.curve(hacide.train$cls, pred.hacide.train,n.thresholds=112)
roc.curve(hacide.train$cls, pred.hacide.train,n.thresholds=1120)
roc.curve(hacide.train$cls, pred.hacide.train,n.thresholds=11200)
a<-roc.curve(hacide.train$cls, pred.hacide.train,n.thresholds=11200)
str(a)
a$thresholds
abs(a$thresholds)=
1
abs(a$thresholds)
ind<-min(abs(a$thresholds))==abs(a$thresholds)
a$false.positive.rate
a$false.positive.rate[idn]
a$false.positive.rate[ind]
a$true.positive.rate[ind]
nosim <- 1000
x <- 1:12
# a random permutation
sample(x)
sample(x, replace = TRUE)
sample(c(0,1), 100, replace = TRUE)
matrix(sample(1 : 6, nosim * 2, replace = TRUE), nosim)
a<-matrix(sample(1 : 6, nosim * 2, replace = TRUE), nosim)
rep(nosim, 4)
rep(1 : 4, rep(nosim, 4))
a<-rep(1 : 4, rep(nosim, 4))
nosim <- 1000
# simulate data for sample size 1 to 4
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE), nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE), nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE), nosim), 1, mean)),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
library(ggplot2)
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g + facet_grid(. ~ size)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
0.75*0.3/(0.75*0.3+(1-0.52)*0.3)
0.75*0.3/0.7/0.48
0.6696/(1+0.6696)
plot(dnorm(1,0,1))
# load data
library(UsingR); data(father.son);
# define son height as the x variable
x <- father.son$sheight
# n is the length
n<-length(x)
# plot histogram for son's heights
x=seq(-3,3,n=100)
x=seq(-3,3,100)
x=seq(-3,3,length=100)
y=dpois(x,4)
plot(x,y)
x=seq(0,90,length=100)
y=dpois(x,4)
x=seq(0,300)
y=dpois(x,4)
plot(x,y)
x=seq(0,10)
y=dpois(x,4)
plot(x,y)
y=dbinom(x,4)
y=dbinom(x,400,0.01)
plot(x,y)
pbinom(4, size = 5, prob = .5, lower.tail = FALSE)
ppois(10,15)
pbinom(3, size = 5, prob = .5, lower.tail = FALSE)
install.packages("xtable")
library(datasets)
library(xtable)
fit <- lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
xt <- xtable(summary(fit))
print(xt, "latex")
setwd("~/")
activity_raw<-read.csv("activity.csv")
setwd("D:/repository/RepData_PeerAssessment1")
setwd("D:/repository/RepData_PeerAssessment1")
activity_raw<-read.csv("activity.csv")
activity_raw$date<-as.Date(activity_raw$date,"%Y-%m-%d")
activity_nonNA<-activity_raw[!is.na(activity_raw$steps),]
summary(activity_raw)
head(activity_raw)
head(activity_nonNA)
tail(activity_nonNA)
table(activity_nonNA)
str(activity_nonNA)
str(activity_nonNA$steps)
summary(activity_nonNA$steps)
aggregate.default()
steps_perday<-aggregate(activity_raw,by=date,FUN=sum)
steps_perday<-aggregate(activity_raw,date,sum)
activity_raw<-read.csv("activity.csv")
steps_perday<-aggregate(activity_raw,date,sum)
summary(activity_raw)
activity_raw$date<-as.Date(activity_raw$date,"%Y-%m-%d")
steps_perday<-aggregate(activity_raw,activity_raw$date,sum)
steps_perday<-aggregate(activity_raw,activity_raw[date],sum)
steps_perday<-aggregate(activity_raw,by=activity_raw[date],FUN=sum,na.rm=TRUE)
steps_perday<-aggregate(activity_raw,by=list(date),FUN=sum,na.rm=TRUE)
steps_perday<-aggregate(activity_raw,by=list(activity_raw$date),FUN=sum,na.rm=TRUE)
steps_perday<-aggregate(activity_raw$steps,by=list(activity_raw$date),
FUN=sum,na.rm=TRUE)
summary(steps_perday)
colnames(steps_perday)<-c("date","steps")
hist(steps_perday)
hist(steps_perday$steps)
mean(steps_perday$steps)
median(steps_perday$steps)
steps_intervalmean<-aggregate(activity_raw$steps,by=list(activity_raw$interval),
FUN=mean,na.rm=TRUE)
colnames(steps_intervalmean)<-c("interval","steps")
plot(steps_intervalmean$interval,steps_intervalmean$steps,type="1")
plot(steps_intervalmean$interval~steps_intervalmean$steps,type="1")
plot(steps_intervalmean$interval,steps_intervalmean$steps,type="l")
max(steps_intervalmean$steps)
attach(steps_intervalmean)
plot(interval,steps,type="l")
interval[steps>=max(steps),]
steps>=max(steps)
interval[steps>=max(steps)]
detach(steps_intervalmean)
sum(is.na(activity_raw$steps))
sum(is.na(activity_raw$steps))
index<-is.na(activity_raw$steps)
for(i in 1:length(index)){
interval_raw<-activity_raw$interval[index[i]]
meanstep_index<-steps_intervalmean$interval==interval_raw
activity_raw$steps[index[i]]=steps_interval$steps[meanstep_index]
}
sum(is.na(activity_raw$steps))
index<-is.na(activity_raw$steps)
for(i in 1:length(index)){
interval_raw<-activity_raw$interval[index[i]]
meanstep_index<-steps_intervalmean$interval==interval_raw
activity_raw$steps[index[i]]=steps_intervalmean$steps[meanstep_index]
}
is.na(activity_raw)
sum(is.na(activity_raw#steps))
q
sum(is.na(activity_raw$steps))
mean(index)
sum(is.na(activity_raw$steps))
index<-is.na(activity_raw$steps)
for(i in activity_raw){
if(is.na(avtivity_raw$steps[i])){
interval_raw<-activity_raw$interval[i]
meanstep_index<-steps_intervalmean$interval==interval_raw
activity_raw$steps[i]=steps_intervalmean$steps[meanstep_index]
}
}
sum(is.na(activity_raw$steps))
index<-is.na(activity_raw$steps)
for(i in activity_raw){
if(is.na(activity_raw$steps[i])){
interval_raw<-activity_raw$interval[i]
meanstep_index<-steps_intervalmean$interval==interval_raw
activity_raw$steps[i]=steps_intervalmean$steps[meanstep_index]
}
}
length(activity_raw)
sum(is.na(activity_raw$steps))
for(i in 1:nrow(activity_raw)){
if(is.na(activity_raw$steps[i])){
interval_raw<-activity_raw$interval[i]
meanstep_index<-steps_intervalmean$interval==interval_raw
activity_raw$steps[i]=steps_intervalmean$steps[meanstep_index]
}
}
sum(is.na(activity_raw$steps))
setwd("D:/repository/RepData_PeerAssessment1")
activity_raw<-read.csv("activity.csv")
summary(activity_raw)
activity_raw$date<-as.Date(activity_raw$date,"%Y-%m-%d")
steps_perday<-aggregate(activity_raw$steps,by=list(activity_raw$date),
FUN=sum,na.rm=TRUE)
colnames(steps_perday)<-c("date","steps")
hist(steps_perday$steps)
mean(steps_perday$steps)
median(steps_perday$steps)
steps_intervalmean<-aggregate(activity_raw$steps,by=list(activity_raw$interval),
FUN=mean,na.rm=TRUE)
colnames(steps_intervalmean)<-c("interval","steps")
attach(steps_intervalmean)
plot(interval,steps,type="l")
interval[steps>=max(steps)]
detach(steps_intervalmean)
sum(is.na(activity_raw$steps))
for(i in 1:nrow(activity_raw)){
if(is.na(activity_raw$steps[i])){
interval_raw<-activity_raw$interval[i]
meanstep_index<-steps_intervalmean$interval==interval_raw
activity_raw$steps[i]=steps_intervalmean$steps[meanstep_index]
}
}
setwd("D:/repository/RepData_PeerAssessment1")
activity_raw<-read.csv("activity.csv")
summary(activity_raw)
activity_raw$date<-as.Date(activity_raw$date,"%Y-%m-%d")
steps_perday<-aggregate(activity_raw$steps,by=list(activity_raw$date),
FUN=sum,na.rm=TRUE)
colnames(steps_perday)<-c("date","steps")
hist(steps_perday$steps)
mean(steps_perday$steps)
median(steps_perday$steps)
steps_intervalmean<-aggregate(activity_raw$steps,by=list(activity_raw$interval),
FUN=mean,na.rm=TRUE)
colnames(steps_intervalmean)<-c("interval","steps")
attach(steps_intervalmean)
plot(interval,steps,type="l")
interval[steps>=max(steps)]
detach(steps_intervalmean)
sum(is.na(activity_raw$steps))
activity_new<-activity_raw
for(i in 1:nrow(activity_new)){
if(is.na(activity_new$steps[i])){
interval_new<-activity_new$interval[i]
meanstep_index<-steps_intervalmean$interval==interval_new
activity_new$steps[i]=steps_intervalmean$steps[meanstep_index]
}
}
steps_perday<-aggregate(activity_new$steps,by=list(activity_new$date),
FUN=sum,na.rm=TRUE)
colnames(steps_perday)<-c("date","steps")
hist(steps_perday$steps)
mean(steps_perday$steps)
median(steps_perday$steps)
activity_new$daystype<-weekdays(activity_new$date)
install.packages("timeDate")
library(timeDate)
library("timeDate")
activity_new$daystype<-isWeekdays(activity_new$date)
activity_new$daystype<-isWeekday(activity_new$date)
activity_new$daystype<-as.factor(activity_new$daystype)
intall.packages("lattice")
install.packages("lattice")
meansteps_daystype<-aggregate(steps~interval+daystype,activity_new,mean)
library(lattice)
xyplot(interval~steps|daystype)
attach(activity_new)
xyplot(interval~steps|daystype)
detach(activity_new)
xyplot(steps~interval|daystype,type="l")
attach(activity_new)
xyplot(steps~interval|daystype,type="l")
detach(activity_new)
activity_new$daystype<-"weekend"
activity_new$daystype[isWeekday(activity_new$date)]<-"weekday"
attach(activity_new)
xyplot(steps~interval|daystype,type="l")
detach(activity_new)
attach(meansteps_daystype)
xyplot(steps~interval|daystype,type="l")
detach(meansteps_daystype)
meansteps_daystype<-aggregate(steps~interval+daystype,activity_new,mean)
attach(meansteps_daystype)
xyplot(steps~interval|daystype,type="l")
detach(meansteps_daystype)
attach(meansteps_daystype)
xyplot(steps~interval|daystype,type="l",horizontal=TRUE)
xyplot(steps~interval|daystype,type="l",layout = c(1,2))
title: "Reproducible Research: Peer Assessment 1"
